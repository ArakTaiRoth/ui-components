// This Jenskins file is used for builds of branches.
// The pipeline does not use SCM and this file maintained here for reference only.
def baseCommand = "--base=origin/master --head=HEAD"
def push_sha
def deployStorybook = false

pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
  }
  agent {
    node {
      label "node12"
    }
  }
  parameters {
    string(
      name: 'source_repo',
      defaultValue: 'https://gitlab.gov.ab.ca/dio/core/ui-components.git',
      description: 'Repo url.'
    )
    string(
      name: 'source_ref',
      defaultValue: 'refs/heads/master',
      description: 'Ref to build.'
    )
  }
  triggers {
    GenericTrigger(
     genericVariables: [
      [key: 'source_ref', value: '$.ref'],
      [key: 'push_sha', value: '$.checkout_sha', defaultValue: ' ']
     ],
     causeString: 'Building pushed changes ($push_sha) on $source_ref ...',
     tokenCredentialId: 'ui-components-dev-gitlab-webhook-token',

     printContributedVariables: false,
     printPostContent: false,
     silentResponse: false,

     regexpFilterText: '$source_ref:$push_sha',
     regexpFilterExpression: '^(?!refs/heads/master).*:[^\\s]'
    )
  }
  stages {
    stage("Prepare") {
      steps {
        checkout(
          [
            $class: 'GitSCM',
            branches: [[
              name: push_sha ?: source_ref
            ]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[
              credentialsId: 'ui-components-dev-git-pull-secret',
              url: "${source_repo}"
            ]]
          ]
        )

        sh 'npm install'
        script {
          if (env.GIT_PREVIOUS_SUCCESSFUL_COMMIT){
            baseCommand = "--base=${GIT_PREVIOUS_SUCCESSFUL_COMMIT}"
          }

          def affected = sh (
            script: "npx nx affected:libs ${baseCommand} --plain",
            returnStdout: true
          ).trim();
          echo "affected: '${affected}'"

          if (affected.length() > 0){
            def isStoryBookOnly = affected == 'shared-storybook-common';
            deployStorybook = true;
            if (isStoryBookOnly == false){
              publishNpm = true;
            }
          }

          echo "deployStorybook: '${deployStorybook}'"
          echo "publishNpm: '${publishNpm}'"
        }
      }
    }
    stage('Build') {
      parallel {
        stage('Test'){
          steps {
            sh "npx nx affected --target=test ${baseCommand} --parallel"
          }
        }
        stage('Lint'){
          steps {
            sh "npx nx affected --target=lint ${baseCommand} --parallel"
          }
        }
        stage('Build storybook'){
           when {
            expression { deployStorybook == true }
          }
          steps {
            sh 'npm run build:angular-storybook' //builds to /dist/storybook/angular-components
            sh 'npm run build:core-storybook' //builds to /dist/storybook/core-css
            sh 'npm run build:angular-storybook' //builds to /dist/storybook/angular-components
            sh 'npm run build:angular-material-storybook' //builds to /dist/storybook/angular-components
            sh 'npm run build:vue-storybook' //builds to /dist/storybook/vue-components
            sh 'npm run build:react-storybook' //builds to /dist/storybook/react-components
          }
        }
        stage('Build npm package'){
          when {
            expression { publishNpm == true }
          }
          steps {
            sh "npx nx affected --target=build ${baseCommand} --parallel --prod --with-deps"
            sh "npx nx affected --target=post ${baseCommand} --parallel"
          }
        }
      }
    }
  }
  post {
    failure {
      slackSend color: "bad", message: "UI Components branch ${source_ref} build ${env.BUILD_NUMBER} Failed: ${env.BUILD_URL}"
    }
  }
}
